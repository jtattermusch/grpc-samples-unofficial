// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/datastore.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Datastore.V1Beta3 {
  public static class Datastore
  {
    static readonly string __ServiceName = "google.datastore.v1beta3.Datastore";

    static readonly Marshaller<global::Google.Datastore.V1Beta3.LookupRequest> __Marshaller_LookupRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.LookupRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.LookupResponse> __Marshaller_LookupResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.LookupResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.RunQueryRequest> __Marshaller_RunQueryRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.RunQueryRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.RunQueryResponse> __Marshaller_RunQueryResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.RunQueryResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.BeginTransactionRequest> __Marshaller_BeginTransactionRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.BeginTransactionRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.BeginTransactionResponse> __Marshaller_BeginTransactionResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.BeginTransactionResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.CommitRequest> __Marshaller_CommitRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.CommitRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.CommitResponse> __Marshaller_CommitResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.CommitResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.RollbackRequest> __Marshaller_RollbackRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.RollbackRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.RollbackResponse> __Marshaller_RollbackResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.RollbackResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.AllocateIdsRequest> __Marshaller_AllocateIdsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.AllocateIdsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Datastore.V1Beta3.AllocateIdsResponse> __Marshaller_AllocateIdsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Datastore.V1Beta3.AllocateIdsResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Datastore.V1Beta3.LookupRequest, global::Google.Datastore.V1Beta3.LookupResponse> __Method_Lookup = new Method<global::Google.Datastore.V1Beta3.LookupRequest, global::Google.Datastore.V1Beta3.LookupResponse>(
        MethodType.Unary,
        __ServiceName,
        "Lookup",
        __Marshaller_LookupRequest,
        __Marshaller_LookupResponse);

    static readonly Method<global::Google.Datastore.V1Beta3.RunQueryRequest, global::Google.Datastore.V1Beta3.RunQueryResponse> __Method_RunQuery = new Method<global::Google.Datastore.V1Beta3.RunQueryRequest, global::Google.Datastore.V1Beta3.RunQueryResponse>(
        MethodType.Unary,
        __ServiceName,
        "RunQuery",
        __Marshaller_RunQueryRequest,
        __Marshaller_RunQueryResponse);

    static readonly Method<global::Google.Datastore.V1Beta3.BeginTransactionRequest, global::Google.Datastore.V1Beta3.BeginTransactionResponse> __Method_BeginTransaction = new Method<global::Google.Datastore.V1Beta3.BeginTransactionRequest, global::Google.Datastore.V1Beta3.BeginTransactionResponse>(
        MethodType.Unary,
        __ServiceName,
        "BeginTransaction",
        __Marshaller_BeginTransactionRequest,
        __Marshaller_BeginTransactionResponse);

    static readonly Method<global::Google.Datastore.V1Beta3.CommitRequest, global::Google.Datastore.V1Beta3.CommitResponse> __Method_Commit = new Method<global::Google.Datastore.V1Beta3.CommitRequest, global::Google.Datastore.V1Beta3.CommitResponse>(
        MethodType.Unary,
        __ServiceName,
        "Commit",
        __Marshaller_CommitRequest,
        __Marshaller_CommitResponse);

    static readonly Method<global::Google.Datastore.V1Beta3.RollbackRequest, global::Google.Datastore.V1Beta3.RollbackResponse> __Method_Rollback = new Method<global::Google.Datastore.V1Beta3.RollbackRequest, global::Google.Datastore.V1Beta3.RollbackResponse>(
        MethodType.Unary,
        __ServiceName,
        "Rollback",
        __Marshaller_RollbackRequest,
        __Marshaller_RollbackResponse);

    static readonly Method<global::Google.Datastore.V1Beta3.AllocateIdsRequest, global::Google.Datastore.V1Beta3.AllocateIdsResponse> __Method_AllocateIds = new Method<global::Google.Datastore.V1Beta3.AllocateIdsRequest, global::Google.Datastore.V1Beta3.AllocateIdsResponse>(
        MethodType.Unary,
        __ServiceName,
        "AllocateIds",
        __Marshaller_AllocateIdsRequest,
        __Marshaller_AllocateIdsResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface IDatastoreClient
    {
      global::Google.Datastore.V1Beta3.LookupResponse Lookup(global::Google.Datastore.V1Beta3.LookupRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Datastore.V1Beta3.LookupResponse Lookup(global::Google.Datastore.V1Beta3.LookupRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.LookupResponse> LookupAsync(global::Google.Datastore.V1Beta3.LookupRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.LookupResponse> LookupAsync(global::Google.Datastore.V1Beta3.LookupRequest request, CallOptions options);
      global::Google.Datastore.V1Beta3.RunQueryResponse RunQuery(global::Google.Datastore.V1Beta3.RunQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Datastore.V1Beta3.RunQueryResponse RunQuery(global::Google.Datastore.V1Beta3.RunQueryRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.RunQueryResponse> RunQueryAsync(global::Google.Datastore.V1Beta3.RunQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.RunQueryResponse> RunQueryAsync(global::Google.Datastore.V1Beta3.RunQueryRequest request, CallOptions options);
      global::Google.Datastore.V1Beta3.BeginTransactionResponse BeginTransaction(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Datastore.V1Beta3.BeginTransactionResponse BeginTransaction(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.BeginTransactionResponse> BeginTransactionAsync(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.BeginTransactionResponse> BeginTransactionAsync(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, CallOptions options);
      global::Google.Datastore.V1Beta3.CommitResponse Commit(global::Google.Datastore.V1Beta3.CommitRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Datastore.V1Beta3.CommitResponse Commit(global::Google.Datastore.V1Beta3.CommitRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.CommitResponse> CommitAsync(global::Google.Datastore.V1Beta3.CommitRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.CommitResponse> CommitAsync(global::Google.Datastore.V1Beta3.CommitRequest request, CallOptions options);
      global::Google.Datastore.V1Beta3.RollbackResponse Rollback(global::Google.Datastore.V1Beta3.RollbackRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Datastore.V1Beta3.RollbackResponse Rollback(global::Google.Datastore.V1Beta3.RollbackRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.RollbackResponse> RollbackAsync(global::Google.Datastore.V1Beta3.RollbackRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.RollbackResponse> RollbackAsync(global::Google.Datastore.V1Beta3.RollbackRequest request, CallOptions options);
      global::Google.Datastore.V1Beta3.AllocateIdsResponse AllocateIds(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Datastore.V1Beta3.AllocateIdsResponse AllocateIds(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.AllocateIdsResponse> AllocateIdsAsync(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Datastore.V1Beta3.AllocateIdsResponse> AllocateIdsAsync(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, CallOptions options);
    }

    // server-side interface
    public interface IDatastore
    {
      Task<global::Google.Datastore.V1Beta3.LookupResponse> Lookup(global::Google.Datastore.V1Beta3.LookupRequest request, ServerCallContext context);
      Task<global::Google.Datastore.V1Beta3.RunQueryResponse> RunQuery(global::Google.Datastore.V1Beta3.RunQueryRequest request, ServerCallContext context);
      Task<global::Google.Datastore.V1Beta3.BeginTransactionResponse> BeginTransaction(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, ServerCallContext context);
      Task<global::Google.Datastore.V1Beta3.CommitResponse> Commit(global::Google.Datastore.V1Beta3.CommitRequest request, ServerCallContext context);
      Task<global::Google.Datastore.V1Beta3.RollbackResponse> Rollback(global::Google.Datastore.V1Beta3.RollbackRequest request, ServerCallContext context);
      Task<global::Google.Datastore.V1Beta3.AllocateIdsResponse> AllocateIds(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, ServerCallContext context);
    }

    // client stub
    public class DatastoreClient : ClientBase, IDatastoreClient
    {
      public DatastoreClient(Channel channel) : base(channel)
      {
      }
      public global::Google.Datastore.V1Beta3.LookupResponse Lookup(global::Google.Datastore.V1Beta3.LookupRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Lookup, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.LookupResponse Lookup(global::Google.Datastore.V1Beta3.LookupRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Lookup, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.LookupResponse> LookupAsync(global::Google.Datastore.V1Beta3.LookupRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Lookup, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.LookupResponse> LookupAsync(global::Google.Datastore.V1Beta3.LookupRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Lookup, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.RunQueryResponse RunQuery(global::Google.Datastore.V1Beta3.RunQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RunQuery, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.RunQueryResponse RunQuery(global::Google.Datastore.V1Beta3.RunQueryRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_RunQuery, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.RunQueryResponse> RunQueryAsync(global::Google.Datastore.V1Beta3.RunQueryRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_RunQuery, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.RunQueryResponse> RunQueryAsync(global::Google.Datastore.V1Beta3.RunQueryRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_RunQuery, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.BeginTransactionResponse BeginTransaction(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_BeginTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.BeginTransactionResponse BeginTransaction(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_BeginTransaction, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.BeginTransactionResponse> BeginTransactionAsync(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_BeginTransaction, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.BeginTransactionResponse> BeginTransactionAsync(global::Google.Datastore.V1Beta3.BeginTransactionRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_BeginTransaction, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.CommitResponse Commit(global::Google.Datastore.V1Beta3.CommitRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Commit, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.CommitResponse Commit(global::Google.Datastore.V1Beta3.CommitRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Commit, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.CommitResponse> CommitAsync(global::Google.Datastore.V1Beta3.CommitRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Commit, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.CommitResponse> CommitAsync(global::Google.Datastore.V1Beta3.CommitRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Commit, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.RollbackResponse Rollback(global::Google.Datastore.V1Beta3.RollbackRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Rollback, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.RollbackResponse Rollback(global::Google.Datastore.V1Beta3.RollbackRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Rollback, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.RollbackResponse> RollbackAsync(global::Google.Datastore.V1Beta3.RollbackRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_Rollback, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.RollbackResponse> RollbackAsync(global::Google.Datastore.V1Beta3.RollbackRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_Rollback, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.AllocateIdsResponse AllocateIds(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AllocateIds, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Datastore.V1Beta3.AllocateIdsResponse AllocateIds(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_AllocateIds, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.AllocateIdsResponse> AllocateIdsAsync(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_AllocateIds, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Datastore.V1Beta3.AllocateIdsResponse> AllocateIdsAsync(global::Google.Datastore.V1Beta3.AllocateIdsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_AllocateIds, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IDatastore serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_Lookup, serviceImpl.Lookup)
          .AddMethod(__Method_RunQuery, serviceImpl.RunQuery)
          .AddMethod(__Method_BeginTransaction, serviceImpl.BeginTransaction)
          .AddMethod(__Method_Commit, serviceImpl.Commit)
          .AddMethod(__Method_Rollback, serviceImpl.Rollback)
          .AddMethod(__Method_AllocateIds, serviceImpl.AllocateIds).Build();
    }

    // creates a new client
    public static DatastoreClient NewClient(Channel channel)
    {
      return new DatastoreClient(channel);
    }

  }
}
#endregion
