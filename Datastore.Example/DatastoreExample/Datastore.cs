// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/datastore/v1beta3/datastore.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Datastore.V1Beta3 {

  /// <summary>Holder for reflection information generated from google/datastore/v1beta3/datastore.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DatastoreReflection {

    #region Descriptor
    /// <summary>File descriptor for google/datastore/v1beta3/datastore.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DatastoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihnb29nbGUvZGF0YXN0b3JlL3YxYmV0YTMvZGF0YXN0b3JlLnByb3RvEhhn",
            "b29nbGUuZGF0YXN0b3JlLnYxYmV0YTMaHGdvb2dsZS9hcGkvYW5ub3RhdGlv",
            "bnMucHJvdG8aJWdvb2dsZS9kYXRhc3RvcmUvdjFiZXRhMy9lbnRpdHkucHJv",
            "dG8aJGdvb2dsZS9kYXRhc3RvcmUvdjFiZXRhMy9xdWVyeS5wcm90byKNAQoN",
            "TG9va3VwUmVxdWVzdBISCgpwcm9qZWN0X2lkGAggASgJEjsKDHJlYWRfb3B0",
            "aW9ucxgBIAEoCzIlLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5SZWFkT3B0",
            "aW9ucxIrCgRrZXlzGAMgAygLMh0uZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEz",
            "LktleSKxAQoOTG9va3VwUmVzcG9uc2USNQoFZm91bmQYASADKAsyJi5nb29n",
            "bGUuZGF0YXN0b3JlLnYxYmV0YTMuRW50aXR5UmVzdWx0EjcKB21pc3NpbmcY",
            "AiADKAsyJi5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuRW50aXR5UmVzdWx0",
            "Ei8KCGRlZmVycmVkGAMgAygLMh0uZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEz",
            "LktleSKYAgoPUnVuUXVlcnlSZXF1ZXN0EhIKCnByb2plY3RfaWQYCCABKAkS",
            "OwoMcGFydGl0aW9uX2lkGAIgASgLMiUuZ29vZ2xlLmRhdGFzdG9yZS52MWJl",
            "dGEzLlBhcnRpdGlvbklkEjsKDHJlYWRfb3B0aW9ucxgBIAEoCzIlLmdvb2ds",
            "ZS5kYXRhc3RvcmUudjFiZXRhMy5SZWFkT3B0aW9ucxIwCgVxdWVyeRgDIAEo",
            "CzIfLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5RdWVyeUgAEjcKCWdxbF9x",
            "dWVyeRgHIAEoCzIiLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5HcWxRdWVy",
            "eUgAQgwKCnF1ZXJ5X3R5cGUifQoQUnVuUXVlcnlSZXNwb25zZRI5CgViYXRj",
            "aBgBIAEoCzIqLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5RdWVyeVJlc3Vs",
            "dEJhdGNoEi4KBXF1ZXJ5GAIgASgLMh8uZ29vZ2xlLmRhdGFzdG9yZS52MWJl",
            "dGEzLlF1ZXJ5Ii0KF0JlZ2luVHJhbnNhY3Rpb25SZXF1ZXN0EhIKCnByb2pl",
            "Y3RfaWQYCCABKAkiLwoYQmVnaW5UcmFuc2FjdGlvblJlc3BvbnNlEhMKC3Ry",
            "YW5zYWN0aW9uGAEgASgMIjoKD1JvbGxiYWNrUmVxdWVzdBISCgpwcm9qZWN0",
            "X2lkGAggASgJEhMKC3RyYW5zYWN0aW9uGAEgASgMIhIKEFJvbGxiYWNrUmVz",
            "cG9uc2Ui8wEKDUNvbW1pdFJlcXVlc3QSEgoKcHJvamVjdF9pZBgIIAEoCRI6",
            "CgRtb2RlGAUgASgOMiwuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkNvbW1p",
            "dFJlcXVlc3QuTW9kZRITCgt0cmFuc2FjdGlvbhgBIAEoDBI1CgltdXRhdGlv",
            "bnMYBiADKAsyIi5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuTXV0YXRpb24i",
            "RgoETW9kZRIUChBNT0RFX1VOU1BFQ0lGSUVEEAASEQoNVFJBTlNBQ1RJT05B",
            "TBABEhUKEU5PTl9UUkFOU0FDVElPTkFMEAIiawoOQ29tbWl0UmVzcG9uc2US",
            "QgoQbXV0YXRpb25fcmVzdWx0cxgDIAMoCzIoLmdvb2dsZS5kYXRhc3RvcmUu",
            "djFiZXRhMy5NdXRhdGlvblJlc3VsdBIVCg1pbmRleF91cGRhdGVzGAQgASgF",
            "IlUKEkFsbG9jYXRlSWRzUmVxdWVzdBISCgpwcm9qZWN0X2lkGAggASgJEisK",
            "BGtleXMYASADKAsyHS5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuS2V5IkIK",
            "E0FsbG9jYXRlSWRzUmVzcG9uc2USKwoEa2V5cxgBIAMoCzIdLmdvb2dsZS5k",
            "YXRhc3RvcmUudjFiZXRhMy5LZXki5AEKCE11dGF0aW9uEjIKBmluc2VydBgE",
            "IAEoCzIgLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5FbnRpdHlIABIyCgZ1",
            "cGRhdGUYBSABKAsyIC5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuRW50aXR5",
            "SAASMgoGdXBzZXJ0GAYgASgLMiAuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEz",
            "LkVudGl0eUgAEi8KBmRlbGV0ZRgHIAEoCzIdLmdvb2dsZS5kYXRhc3RvcmUu",
            "djFiZXRhMy5LZXlIAEILCglvcGVyYXRpb24iPAoOTXV0YXRpb25SZXN1bHQS",
            "KgoDa2V5GAMgASgLMh0uZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLktleSLa",
            "AQoLUmVhZE9wdGlvbnMSUQoQcmVhZF9jb25zaXN0ZW5jeRgBIAEoDjI1Lmdv",
            "b2dsZS5kYXRhc3RvcmUudjFiZXRhMy5SZWFkT3B0aW9ucy5SZWFkQ29uc2lz",
            "dGVuY3lIABIVCgt0cmFuc2FjdGlvbhgCIAEoDEgAIk0KD1JlYWRDb25zaXN0",
            "ZW5jeRIgChxSRUFEX0NPTlNJU1RFTkNZX1VOU1BFQ0lGSUVEEAASCgoGU1RS",
            "T05HEAESDAoIRVZFTlRVQUwQAkISChBjb25zaXN0ZW5jeV90eXBlMrcHCglE",
            "YXRhc3RvcmUSjQEKBkxvb2t1cBInLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRh",
            "My5Mb29rdXBSZXF1ZXN0GiguZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkxv",
            "b2t1cFJlc3BvbnNlIjCC0+STAioiJS92MWJldGEzL3Byb2plY3RzL3twcm9q",
            "ZWN0X2lkfTpsb29rdXA6ASoSlQEKCFJ1blF1ZXJ5EikuZ29vZ2xlLmRhdGFz",
            "dG9yZS52MWJldGEzLlJ1blF1ZXJ5UmVxdWVzdBoqLmdvb2dsZS5kYXRhc3Rv",
            "cmUudjFiZXRhMy5SdW5RdWVyeVJlc3BvbnNlIjKC0+STAiwiJy92MWJldGEz",
            "L3Byb2plY3RzL3twcm9qZWN0X2lkfTpydW5RdWVyeToBKhK1AQoQQmVnaW5U",
            "cmFuc2FjdGlvbhIxLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5CZWdpblRy",
            "YW5zYWN0aW9uUmVxdWVzdBoyLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5C",
            "ZWdpblRyYW5zYWN0aW9uUmVzcG9uc2UiOoLT5JMCNCIvL3YxYmV0YTMvcHJv",
            "amVjdHMve3Byb2plY3RfaWR9OmJlZ2luVHJhbnNhY3Rpb246ASoSjQEKBkNv",
            "bW1pdBInLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5Db21taXRSZXF1ZXN0",
            "GiguZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkNvbW1pdFJlc3BvbnNlIjCC",
            "0+STAioiJS92MWJldGEzL3Byb2plY3RzL3twcm9qZWN0X2lkfTpjb21taXQ6",
            "ASoSlQEKCFJvbGxiYWNrEikuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLlJv",
            "bGxiYWNrUmVxdWVzdBoqLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5Sb2xs",
            "YmFja1Jlc3BvbnNlIjKC0+STAiwiJy92MWJldGEzL3Byb2plY3RzL3twcm9q",
            "ZWN0X2lkfTpyb2xsYmFjazoBKhKhAQoLQWxsb2NhdGVJZHMSLC5nb29nbGUu",
            "ZGF0YXN0b3JlLnYxYmV0YTMuQWxsb2NhdGVJZHNSZXF1ZXN0Gi0uZ29vZ2xl",
            "LmRhdGFzdG9yZS52MWJldGEzLkFsbG9jYXRlSWRzUmVzcG9uc2UiNYLT5JMC",
            "LyIqL3YxYmV0YTMvcHJvamVjdHMve3Byb2plY3RfaWR9OmFsbG9jYXRlSWRz",
            "OgEqQjAKHGNvbS5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTNCDkRhdGFzdG9y",
            "ZVByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Datastore.V1Beta3.EntityReflection.Descriptor, global::Google.Datastore.V1Beta3.QueryReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.LookupRequest), global::Google.Datastore.V1Beta3.LookupRequest.Parser, new[]{ "ProjectId", "ReadOptions", "Keys" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.LookupResponse), global::Google.Datastore.V1Beta3.LookupResponse.Parser, new[]{ "Found", "Missing", "Deferred" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.RunQueryRequest), global::Google.Datastore.V1Beta3.RunQueryRequest.Parser, new[]{ "ProjectId", "PartitionId", "ReadOptions", "Query", "GqlQuery" }, new[]{ "QueryType" }, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.RunQueryResponse), global::Google.Datastore.V1Beta3.RunQueryResponse.Parser, new[]{ "Batch", "Query" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.BeginTransactionRequest), global::Google.Datastore.V1Beta3.BeginTransactionRequest.Parser, new[]{ "ProjectId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.BeginTransactionResponse), global::Google.Datastore.V1Beta3.BeginTransactionResponse.Parser, new[]{ "Transaction" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.RollbackRequest), global::Google.Datastore.V1Beta3.RollbackRequest.Parser, new[]{ "ProjectId", "Transaction" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.RollbackResponse), global::Google.Datastore.V1Beta3.RollbackResponse.Parser, null, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.CommitRequest), global::Google.Datastore.V1Beta3.CommitRequest.Parser, new[]{ "ProjectId", "Mode", "Transaction", "Mutations" }, null, new[]{ typeof(global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode) }, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.CommitResponse), global::Google.Datastore.V1Beta3.CommitResponse.Parser, new[]{ "MutationResults", "IndexUpdates" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.AllocateIdsRequest), global::Google.Datastore.V1Beta3.AllocateIdsRequest.Parser, new[]{ "ProjectId", "Keys" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.AllocateIdsResponse), global::Google.Datastore.V1Beta3.AllocateIdsResponse.Parser, new[]{ "Keys" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.Mutation), global::Google.Datastore.V1Beta3.Mutation.Parser, new[]{ "Insert", "Update", "Upsert", "Delete" }, new[]{ "Operation" }, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.MutationResult), global::Google.Datastore.V1Beta3.MutationResult.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Datastore.V1Beta3.ReadOptions), global::Google.Datastore.V1Beta3.ReadOptions.Parser, new[]{ "ReadConsistency", "Transaction" }, new[]{ "ConsistencyType" }, new[]{ typeof(global::Google.Datastore.V1Beta3.ReadOptions.Types.ReadConsistency) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  The request for [google.datastore.v1beta3.Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LookupRequest : pb::IMessage<LookupRequest> {
    private static readonly pb::MessageParser<LookupRequest> _parser = new pb::MessageParser<LookupRequest>(() => new LookupRequest());
    public static pb::MessageParser<LookupRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LookupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LookupRequest(LookupRequest other) : this() {
      projectId_ = other.projectId_;
      ReadOptions = other.readOptions_ != null ? other.ReadOptions.Clone() : null;
      keys_ = other.keys_.Clone();
    }

    public LookupRequest Clone() {
      return new LookupRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 8;
    private string projectId_ = "";
    /// <summary>
    ///  Project ID against which to make the request. Not required if the request
    ///  is made over HTTP.
    /// </summary>
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "read_options" field.</summary>
    public const int ReadOptionsFieldNumber = 1;
    private global::Google.Datastore.V1Beta3.ReadOptions readOptions_;
    /// <summary>
    ///  Options for this lookup request.
    /// </summary>
    public global::Google.Datastore.V1Beta3.ReadOptions ReadOptions {
      get { return readOptions_; }
      set {
        readOptions_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Datastore.V1Beta3.Key.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> keys_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key>();
    /// <summary>
    ///  Keys of entities to look up.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> Keys {
      get { return keys_; }
    }

    public override bool Equals(object other) {
      return Equals(other as LookupRequest);
    }

    public bool Equals(LookupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (!object.Equals(ReadOptions, other.ReadOptions)) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (readOptions_ != null) hash ^= ReadOptions.GetHashCode();
      hash ^= keys_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (readOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReadOptions);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      if (ProjectId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProjectId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (readOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadOptions);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    public void MergeFrom(LookupRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.readOptions_ != null) {
        if (readOptions_ == null) {
          readOptions_ = new global::Google.Datastore.V1Beta3.ReadOptions();
        }
        ReadOptions.MergeFrom(other.ReadOptions);
      }
      keys_.Add(other.keys_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (readOptions_ == null) {
              readOptions_ = new global::Google.Datastore.V1Beta3.ReadOptions();
            }
            input.ReadMessage(readOptions_);
            break;
          }
          case 26: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 66: {
            ProjectId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response for [google.datastore.v1beta3.Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LookupResponse : pb::IMessage<LookupResponse> {
    private static readonly pb::MessageParser<LookupResponse> _parser = new pb::MessageParser<LookupResponse>(() => new LookupResponse());
    public static pb::MessageParser<LookupResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public LookupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public LookupResponse(LookupResponse other) : this() {
      found_ = other.found_.Clone();
      missing_ = other.missing_.Clone();
      deferred_ = other.deferred_.Clone();
    }

    public LookupResponse Clone() {
      return new LookupResponse(this);
    }

    /// <summary>Field number for the "found" field.</summary>
    public const int FoundFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.EntityResult> _repeated_found_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Datastore.V1Beta3.EntityResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.EntityResult> found_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.EntityResult>();
    /// <summary>
    ///  Entities found as `ResultType.FULL` entities. The order of results in this
    ///  field is undefined and has no relation to the order of the keys in the
    ///  input.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.EntityResult> Found {
      get { return found_; }
    }

    /// <summary>Field number for the "missing" field.</summary>
    public const int MissingFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.EntityResult> _repeated_missing_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Datastore.V1Beta3.EntityResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.EntityResult> missing_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.EntityResult>();
    /// <summary>
    ///  Entities not found as `ResultType.KEY_ONLY` entities. The order of results
    ///  in this field is undefined and has no relation to the order of the keys
    ///  in the input.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.EntityResult> Missing {
      get { return missing_; }
    }

    /// <summary>Field number for the "deferred" field.</summary>
    public const int DeferredFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.Key> _repeated_deferred_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Datastore.V1Beta3.Key.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> deferred_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key>();
    /// <summary>
    ///  A list of keys that were not looked up due to resource constraints. The
    ///  order of results in this field is undefined and has no relation to the
    ///  order of the keys in the input.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> Deferred {
      get { return deferred_; }
    }

    public override bool Equals(object other) {
      return Equals(other as LookupResponse);
    }

    public bool Equals(LookupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!found_.Equals(other.found_)) return false;
      if(!missing_.Equals(other.missing_)) return false;
      if(!deferred_.Equals(other.deferred_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= found_.GetHashCode();
      hash ^= missing_.GetHashCode();
      hash ^= deferred_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      found_.WriteTo(output, _repeated_found_codec);
      missing_.WriteTo(output, _repeated_missing_codec);
      deferred_.WriteTo(output, _repeated_deferred_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += found_.CalculateSize(_repeated_found_codec);
      size += missing_.CalculateSize(_repeated_missing_codec);
      size += deferred_.CalculateSize(_repeated_deferred_codec);
      return size;
    }

    public void MergeFrom(LookupResponse other) {
      if (other == null) {
        return;
      }
      found_.Add(other.found_);
      missing_.Add(other.missing_);
      deferred_.Add(other.deferred_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            found_.AddEntriesFrom(input, _repeated_found_codec);
            break;
          }
          case 18: {
            missing_.AddEntriesFrom(input, _repeated_missing_codec);
            break;
          }
          case 26: {
            deferred_.AddEntriesFrom(input, _repeated_deferred_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request for [google.datastore.v1beta3.Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RunQueryRequest : pb::IMessage<RunQueryRequest> {
    private static readonly pb::MessageParser<RunQueryRequest> _parser = new pb::MessageParser<RunQueryRequest>(() => new RunQueryRequest());
    public static pb::MessageParser<RunQueryRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RunQueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RunQueryRequest(RunQueryRequest other) : this() {
      projectId_ = other.projectId_;
      PartitionId = other.partitionId_ != null ? other.PartitionId.Clone() : null;
      ReadOptions = other.readOptions_ != null ? other.ReadOptions.Clone() : null;
      switch (other.QueryTypeCase) {
        case QueryTypeOneofCase.Query:
          Query = other.Query.Clone();
          break;
        case QueryTypeOneofCase.GqlQuery:
          GqlQuery = other.GqlQuery.Clone();
          break;
      }

    }

    public RunQueryRequest Clone() {
      return new RunQueryRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 8;
    private string projectId_ = "";
    /// <summary>
    ///  Project ID against which to make the request. Not required if the request
    ///  is made over HTTP.
    /// </summary>
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "partition_id" field.</summary>
    public const int PartitionIdFieldNumber = 2;
    private global::Google.Datastore.V1Beta3.PartitionId partitionId_;
    /// <summary>
    ///  Entities are partitioned into subsets, identified by a partition ID.
    ///  Queries are scoped to a single partition.
    ///  This partition ID is normalized with the standard default context
    ///  partition ID, but all other partition IDs in `RunQueryRequest` are
    ///  normalized with this partition ID as the context partition ID.
    /// </summary>
    public global::Google.Datastore.V1Beta3.PartitionId PartitionId {
      get { return partitionId_; }
      set {
        partitionId_ = value;
      }
    }

    /// <summary>Field number for the "read_options" field.</summary>
    public const int ReadOptionsFieldNumber = 1;
    private global::Google.Datastore.V1Beta3.ReadOptions readOptions_;
    /// <summary>
    ///  The options for this query.
    /// </summary>
    public global::Google.Datastore.V1Beta3.ReadOptions ReadOptions {
      get { return readOptions_; }
      set {
        readOptions_ = value;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 3;
    /// <summary>
    ///  The query to run.
    /// </summary>
    public global::Google.Datastore.V1Beta3.Query Query {
      get { return queryTypeCase_ == QueryTypeOneofCase.Query ? (global::Google.Datastore.V1Beta3.Query) queryType_ : null; }
      set {
        queryType_ = value;
        queryTypeCase_ = value == null ? QueryTypeOneofCase.None : QueryTypeOneofCase.Query;
      }
    }

    /// <summary>Field number for the "gql_query" field.</summary>
    public const int GqlQueryFieldNumber = 7;
    /// <summary>
    ///  The GQL query to run.
    /// </summary>
    public global::Google.Datastore.V1Beta3.GqlQuery GqlQuery {
      get { return queryTypeCase_ == QueryTypeOneofCase.GqlQuery ? (global::Google.Datastore.V1Beta3.GqlQuery) queryType_ : null; }
      set {
        queryType_ = value;
        queryTypeCase_ = value == null ? QueryTypeOneofCase.None : QueryTypeOneofCase.GqlQuery;
      }
    }

    private object queryType_;
    /// <summary>Enum of possible cases for the "query_type" oneof.</summary>
    public enum QueryTypeOneofCase {
      None = 0,
      Query = 3,
      GqlQuery = 7,
    }
    private QueryTypeOneofCase queryTypeCase_ = QueryTypeOneofCase.None;
    public QueryTypeOneofCase QueryTypeCase {
      get { return queryTypeCase_; }
    }

    public void ClearQueryType() {
      queryTypeCase_ = QueryTypeOneofCase.None;
      queryType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as RunQueryRequest);
    }

    public bool Equals(RunQueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (!object.Equals(PartitionId, other.PartitionId)) return false;
      if (!object.Equals(ReadOptions, other.ReadOptions)) return false;
      if (!object.Equals(Query, other.Query)) return false;
      if (!object.Equals(GqlQuery, other.GqlQuery)) return false;
      if (QueryTypeCase != other.QueryTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (partitionId_ != null) hash ^= PartitionId.GetHashCode();
      if (readOptions_ != null) hash ^= ReadOptions.GetHashCode();
      if (queryTypeCase_ == QueryTypeOneofCase.Query) hash ^= Query.GetHashCode();
      if (queryTypeCase_ == QueryTypeOneofCase.GqlQuery) hash ^= GqlQuery.GetHashCode();
      hash ^= (int) queryTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (readOptions_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReadOptions);
      }
      if (partitionId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PartitionId);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.Query) {
        output.WriteRawTag(26);
        output.WriteMessage(Query);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.GqlQuery) {
        output.WriteRawTag(58);
        output.WriteMessage(GqlQuery);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProjectId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (partitionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartitionId);
      }
      if (readOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadOptions);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.Query) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      if (queryTypeCase_ == QueryTypeOneofCase.GqlQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GqlQuery);
      }
      return size;
    }

    public void MergeFrom(RunQueryRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.partitionId_ != null) {
        if (partitionId_ == null) {
          partitionId_ = new global::Google.Datastore.V1Beta3.PartitionId();
        }
        PartitionId.MergeFrom(other.PartitionId);
      }
      if (other.readOptions_ != null) {
        if (readOptions_ == null) {
          readOptions_ = new global::Google.Datastore.V1Beta3.ReadOptions();
        }
        ReadOptions.MergeFrom(other.ReadOptions);
      }
      switch (other.QueryTypeCase) {
        case QueryTypeOneofCase.Query:
          Query = other.Query;
          break;
        case QueryTypeOneofCase.GqlQuery:
          GqlQuery = other.GqlQuery;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (readOptions_ == null) {
              readOptions_ = new global::Google.Datastore.V1Beta3.ReadOptions();
            }
            input.ReadMessage(readOptions_);
            break;
          }
          case 18: {
            if (partitionId_ == null) {
              partitionId_ = new global::Google.Datastore.V1Beta3.PartitionId();
            }
            input.ReadMessage(partitionId_);
            break;
          }
          case 26: {
            global::Google.Datastore.V1Beta3.Query subBuilder = new global::Google.Datastore.V1Beta3.Query();
            if (queryTypeCase_ == QueryTypeOneofCase.Query) {
              subBuilder.MergeFrom(Query);
            }
            input.ReadMessage(subBuilder);
            Query = subBuilder;
            break;
          }
          case 58: {
            global::Google.Datastore.V1Beta3.GqlQuery subBuilder = new global::Google.Datastore.V1Beta3.GqlQuery();
            if (queryTypeCase_ == QueryTypeOneofCase.GqlQuery) {
              subBuilder.MergeFrom(GqlQuery);
            }
            input.ReadMessage(subBuilder);
            GqlQuery = subBuilder;
            break;
          }
          case 66: {
            ProjectId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response for [google.datastore.v1beta3.Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RunQueryResponse : pb::IMessage<RunQueryResponse> {
    private static readonly pb::MessageParser<RunQueryResponse> _parser = new pb::MessageParser<RunQueryResponse>(() => new RunQueryResponse());
    public static pb::MessageParser<RunQueryResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RunQueryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RunQueryResponse(RunQueryResponse other) : this() {
      Batch = other.batch_ != null ? other.Batch.Clone() : null;
      Query = other.query_ != null ? other.Query.Clone() : null;
    }

    public RunQueryResponse Clone() {
      return new RunQueryResponse(this);
    }

    /// <summary>Field number for the "batch" field.</summary>
    public const int BatchFieldNumber = 1;
    private global::Google.Datastore.V1Beta3.QueryResultBatch batch_;
    /// <summary>
    ///  A batch of query results (always present).
    /// </summary>
    public global::Google.Datastore.V1Beta3.QueryResultBatch Batch {
      get { return batch_; }
      set {
        batch_ = value;
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 2;
    private global::Google.Datastore.V1Beta3.Query query_;
    /// <summary>
    ///  The parsed form of the `GqlQuery` from the request, if it was set.
    /// </summary>
    public global::Google.Datastore.V1Beta3.Query Query {
      get { return query_; }
      set {
        query_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RunQueryResponse);
    }

    public bool Equals(RunQueryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Batch, other.Batch)) return false;
      if (!object.Equals(Query, other.Query)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (batch_ != null) hash ^= Batch.GetHashCode();
      if (query_ != null) hash ^= Query.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (batch_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Batch);
      }
      if (query_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Query);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (batch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Batch);
      }
      if (query_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
      }
      return size;
    }

    public void MergeFrom(RunQueryResponse other) {
      if (other == null) {
        return;
      }
      if (other.batch_ != null) {
        if (batch_ == null) {
          batch_ = new global::Google.Datastore.V1Beta3.QueryResultBatch();
        }
        Batch.MergeFrom(other.Batch);
      }
      if (other.query_ != null) {
        if (query_ == null) {
          query_ = new global::Google.Datastore.V1Beta3.Query();
        }
        Query.MergeFrom(other.Query);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (batch_ == null) {
              batch_ = new global::Google.Datastore.V1Beta3.QueryResultBatch();
            }
            input.ReadMessage(batch_);
            break;
          }
          case 18: {
            if (query_ == null) {
              query_ = new global::Google.Datastore.V1Beta3.Query();
            }
            input.ReadMessage(query_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request for [google.datastore.v1beta3.Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BeginTransactionRequest : pb::IMessage<BeginTransactionRequest> {
    private static readonly pb::MessageParser<BeginTransactionRequest> _parser = new pb::MessageParser<BeginTransactionRequest>(() => new BeginTransactionRequest());
    public static pb::MessageParser<BeginTransactionRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BeginTransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BeginTransactionRequest(BeginTransactionRequest other) : this() {
      projectId_ = other.projectId_;
    }

    public BeginTransactionRequest Clone() {
      return new BeginTransactionRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 8;
    private string projectId_ = "";
    /// <summary>
    ///  Project ID against which to make the request. Not required if the request
    ///  is made over HTTP.
    /// </summary>
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BeginTransactionRequest);
    }

    public bool Equals(BeginTransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProjectId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      return size;
    }

    public void MergeFrom(BeginTransactionRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 66: {
            ProjectId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response for [google.datastore.v1beta3.Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BeginTransactionResponse : pb::IMessage<BeginTransactionResponse> {
    private static readonly pb::MessageParser<BeginTransactionResponse> _parser = new pb::MessageParser<BeginTransactionResponse>(() => new BeginTransactionResponse());
    public static pb::MessageParser<BeginTransactionResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BeginTransactionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BeginTransactionResponse(BeginTransactionResponse other) : this() {
      transaction_ = other.transaction_;
    }

    public BeginTransactionResponse Clone() {
      return new BeginTransactionResponse(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    ///  The transaction identifier (always present).
    /// </summary>
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BeginTransactionResponse);
    }

    public bool Equals(BeginTransactionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Transaction != other.Transaction) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Transaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Transaction);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      return size;
    }

    public void MergeFrom(BeginTransactionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request for [google.datastore.v1beta3.Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RollbackRequest : pb::IMessage<RollbackRequest> {
    private static readonly pb::MessageParser<RollbackRequest> _parser = new pb::MessageParser<RollbackRequest>(() => new RollbackRequest());
    public static pb::MessageParser<RollbackRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RollbackRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RollbackRequest(RollbackRequest other) : this() {
      projectId_ = other.projectId_;
      transaction_ = other.transaction_;
    }

    public RollbackRequest Clone() {
      return new RollbackRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 8;
    private string projectId_ = "";
    /// <summary>
    ///  Project ID against which to make the request. Not required if the request
    ///  is made over HTTP.
    /// </summary>
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    ///  The transaction identifier, returned by a call to
    ///  [google.datastore.v1beta3.Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
    /// </summary>
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RollbackRequest);
    }

    public bool Equals(RollbackRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Transaction != other.Transaction) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Transaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Transaction);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProjectId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      return size;
    }

    public void MergeFrom(RollbackRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Transaction = input.ReadBytes();
            break;
          }
          case 66: {
            ProjectId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response for [google.datastore.v1beta3.Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback]
  ///  (an empty message).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RollbackResponse : pb::IMessage<RollbackResponse> {
    private static readonly pb::MessageParser<RollbackResponse> _parser = new pb::MessageParser<RollbackResponse>(() => new RollbackResponse());
    public static pb::MessageParser<RollbackResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RollbackResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RollbackResponse(RollbackResponse other) : this() {
    }

    public RollbackResponse Clone() {
      return new RollbackResponse(this);
    }

    public override bool Equals(object other) {
      return Equals(other as RollbackResponse);
    }

    public bool Equals(RollbackResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(RollbackResponse other) {
      if (other == null) {
        return;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  The request for [google.datastore.v1beta3.Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommitRequest : pb::IMessage<CommitRequest> {
    private static readonly pb::MessageParser<CommitRequest> _parser = new pb::MessageParser<CommitRequest>(() => new CommitRequest());
    public static pb::MessageParser<CommitRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommitRequest(CommitRequest other) : this() {
      projectId_ = other.projectId_;
      mode_ = other.mode_;
      transaction_ = other.transaction_;
      mutations_ = other.mutations_.Clone();
    }

    public CommitRequest Clone() {
      return new CommitRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 8;
    private string projectId_ = "";
    /// <summary>
    ///  Project ID against which to make the request. Not required if the request
    ///  is made over HTTP.
    /// </summary>
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode mode_ = global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode.MODE_UNSPECIFIED;
    /// <summary>
    ///  The type of commit to perform. Defaults to `TRANSACTIONAL`.
    /// </summary>
    public global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private pb::ByteString transaction_ = pb::ByteString.Empty;
    /// <summary>
    ///  The transaction identifier, returned by a call to
    ///  [google.datastore.v1beta3.Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
    ///  Must be set when mode is `TRANSACTIONAL`.
    /// </summary>
    public pb::ByteString Transaction {
      get { return transaction_; }
      set {
        transaction_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mutations" field.</summary>
    public const int MutationsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.Mutation> _repeated_mutations_codec
        = pb::FieldCodec.ForMessage(50, global::Google.Datastore.V1Beta3.Mutation.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.Mutation> mutations_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.Mutation>();
    /// <summary>
    ///  The mutations to perform.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.Mutation> Mutations {
      get { return mutations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as CommitRequest);
    }

    public bool Equals(CommitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Mode != other.Mode) return false;
      if (Transaction != other.Transaction) return false;
      if(!mutations_.Equals(other.mutations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Mode != global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode.MODE_UNSPECIFIED) hash ^= Mode.GetHashCode();
      if (Transaction.Length != 0) hash ^= Transaction.GetHashCode();
      hash ^= mutations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Transaction.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Transaction);
      }
      if (Mode != global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode.MODE_UNSPECIFIED) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      mutations_.WriteTo(output, _repeated_mutations_codec);
      if (ProjectId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProjectId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Mode != global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode.MODE_UNSPECIFIED) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (Transaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      size += mutations_.CalculateSize(_repeated_mutations_codec);
      return size;
    }

    public void MergeFrom(CommitRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Mode != global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode.MODE_UNSPECIFIED) {
        Mode = other.Mode;
      }
      if (other.Transaction.Length != 0) {
        Transaction = other.Transaction;
      }
      mutations_.Add(other.mutations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Transaction = input.ReadBytes();
            break;
          }
          case 40: {
            mode_ = (global::Google.Datastore.V1Beta3.CommitRequest.Types.Mode) input.ReadEnum();
            break;
          }
          case 50: {
            mutations_.AddEntriesFrom(input, _repeated_mutations_codec);
            break;
          }
          case 66: {
            ProjectId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CommitRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      /// <summary>
      ///  Commit modes.
      /// </summary>
      public enum Mode {
        /// <summary>
        ///  Unspecified.
        /// </summary>
        MODE_UNSPECIFIED = 0,
        /// <summary>
        ///  Transactional.
        /// </summary>
        TRANSACTIONAL = 1,
        /// <summary>
        ///  Non-transactional.
        /// </summary>
        NON_TRANSACTIONAL = 2,
      }

    }
    #endregion

  }

  /// <summary>
  ///  The response for [google.datastore.v1beta3.Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CommitResponse : pb::IMessage<CommitResponse> {
    private static readonly pb::MessageParser<CommitResponse> _parser = new pb::MessageParser<CommitResponse>(() => new CommitResponse());
    public static pb::MessageParser<CommitResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CommitResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CommitResponse(CommitResponse other) : this() {
      mutationResults_ = other.mutationResults_.Clone();
      indexUpdates_ = other.indexUpdates_;
    }

    public CommitResponse Clone() {
      return new CommitResponse(this);
    }

    /// <summary>Field number for the "mutation_results" field.</summary>
    public const int MutationResultsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.MutationResult> _repeated_mutationResults_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Datastore.V1Beta3.MutationResult.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.MutationResult> mutationResults_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.MutationResult>();
    /// <summary>
    ///  The result of performing the mutations.
    ///  The i-th mutation result corresponds to the i-th mutation in the request.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.MutationResult> MutationResults {
      get { return mutationResults_; }
    }

    /// <summary>Field number for the "index_updates" field.</summary>
    public const int IndexUpdatesFieldNumber = 4;
    private int indexUpdates_;
    /// <summary>
    ///  The number of index entries updated during the commit.
    /// </summary>
    public int IndexUpdates {
      get { return indexUpdates_; }
      set {
        indexUpdates_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CommitResponse);
    }

    public bool Equals(CommitResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mutationResults_.Equals(other.mutationResults_)) return false;
      if (IndexUpdates != other.IndexUpdates) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= mutationResults_.GetHashCode();
      if (IndexUpdates != 0) hash ^= IndexUpdates.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      mutationResults_.WriteTo(output, _repeated_mutationResults_codec);
      if (IndexUpdates != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IndexUpdates);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += mutationResults_.CalculateSize(_repeated_mutationResults_codec);
      if (IndexUpdates != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IndexUpdates);
      }
      return size;
    }

    public void MergeFrom(CommitResponse other) {
      if (other == null) {
        return;
      }
      mutationResults_.Add(other.mutationResults_);
      if (other.IndexUpdates != 0) {
        IndexUpdates = other.IndexUpdates;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            mutationResults_.AddEntriesFrom(input, _repeated_mutationResults_codec);
            break;
          }
          case 32: {
            IndexUpdates = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The request for [google.datastore.v1beta3.Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AllocateIdsRequest : pb::IMessage<AllocateIdsRequest> {
    private static readonly pb::MessageParser<AllocateIdsRequest> _parser = new pb::MessageParser<AllocateIdsRequest>(() => new AllocateIdsRequest());
    public static pb::MessageParser<AllocateIdsRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AllocateIdsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AllocateIdsRequest(AllocateIdsRequest other) : this() {
      projectId_ = other.projectId_;
      keys_ = other.keys_.Clone();
    }

    public AllocateIdsRequest Clone() {
      return new AllocateIdsRequest(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 8;
    private string projectId_ = "";
    /// <summary>
    ///  Project ID against which to make the request. Not required if the request
    ///  is made over HTTP.
    /// </summary>
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Datastore.V1Beta3.Key.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> keys_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key>();
    /// <summary>
    ///  A list of keys with incomplete key paths for which to allocate IDs.
    ///  No key may be reserved/read-only.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> Keys {
      get { return keys_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AllocateIdsRequest);
    }

    public bool Equals(AllocateIdsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      hash ^= keys_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
      if (ProjectId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProjectId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    public void MergeFrom(AllocateIdsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      keys_.Add(other.keys_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 66: {
            ProjectId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The response for [google.datastore.v1beta3.Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AllocateIdsResponse : pb::IMessage<AllocateIdsResponse> {
    private static readonly pb::MessageParser<AllocateIdsResponse> _parser = new pb::MessageParser<AllocateIdsResponse>(() => new AllocateIdsResponse());
    public static pb::MessageParser<AllocateIdsResponse> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AllocateIdsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AllocateIdsResponse(AllocateIdsResponse other) : this() {
      keys_ = other.keys_.Clone();
    }

    public AllocateIdsResponse Clone() {
      return new AllocateIdsResponse(this);
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Datastore.V1Beta3.Key> _repeated_keys_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Datastore.V1Beta3.Key.Parser);
    private readonly pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> keys_ = new pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key>();
    /// <summary>
    ///  The keys specified in the request (in the same order), each with
    ///  its key path completed with a newly allocated ID.
    /// </summary>
    public pbc::RepeatedField<global::Google.Datastore.V1Beta3.Key> Keys {
      get { return keys_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AllocateIdsResponse);
    }

    public bool Equals(AllocateIdsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!keys_.Equals(other.keys_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= keys_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      keys_.WriteTo(output, _repeated_keys_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += keys_.CalculateSize(_repeated_keys_codec);
      return size;
    }

    public void MergeFrom(AllocateIdsResponse other) {
      if (other == null) {
        return;
      }
      keys_.Add(other.keys_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A mutation to apply to an entity.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Mutation : pb::IMessage<Mutation> {
    private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
    public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Mutation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Mutation(Mutation other) : this() {
      switch (other.OperationCase) {
        case OperationOneofCase.Insert:
          Insert = other.Insert.Clone();
          break;
        case OperationOneofCase.Update:
          Update = other.Update.Clone();
          break;
        case OperationOneofCase.Upsert:
          Upsert = other.Upsert.Clone();
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete.Clone();
          break;
      }

    }

    public Mutation Clone() {
      return new Mutation(this);
    }

    /// <summary>Field number for the "insert" field.</summary>
    public const int InsertFieldNumber = 4;
    /// <summary>
    ///  The entity to insert. The entity must not already exist.
    ///  The entity's key's final path element may be incomplete.
    /// </summary>
    public global::Google.Datastore.V1Beta3.Entity Insert {
      get { return operationCase_ == OperationOneofCase.Insert ? (global::Google.Datastore.V1Beta3.Entity) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Insert;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 5;
    /// <summary>
    ///  The entity to update. The entity must already exist.
    ///  Must have a complete key path.
    /// </summary>
    public global::Google.Datastore.V1Beta3.Entity Update {
      get { return operationCase_ == OperationOneofCase.Update ? (global::Google.Datastore.V1Beta3.Entity) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Update;
      }
    }

    /// <summary>Field number for the "upsert" field.</summary>
    public const int UpsertFieldNumber = 6;
    /// <summary>
    ///  The entity to upsert. The entity may or may not already exist.
    ///  The entity's key's final path element may be incomplete.
    /// </summary>
    public global::Google.Datastore.V1Beta3.Entity Upsert {
      get { return operationCase_ == OperationOneofCase.Upsert ? (global::Google.Datastore.V1Beta3.Entity) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Upsert;
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 7;
    /// <summary>
    ///  The key of the entity to delete. The entity may or may not already exist.
    ///  Must have a complete key path and must not be reserved/read-only.
    /// </summary>
    public global::Google.Datastore.V1Beta3.Key Delete {
      get { return operationCase_ == OperationOneofCase.Delete ? (global::Google.Datastore.V1Beta3.Key) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Delete;
      }
    }

    private object operation_;
    /// <summary>Enum of possible cases for the "operation" oneof.</summary>
    public enum OperationOneofCase {
      None = 0,
      Insert = 4,
      Update = 5,
      Upsert = 6,
      Delete = 7,
    }
    private OperationOneofCase operationCase_ = OperationOneofCase.None;
    public OperationOneofCase OperationCase {
      get { return operationCase_; }
    }

    public void ClearOperation() {
      operationCase_ = OperationOneofCase.None;
      operation_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Mutation);
    }

    public bool Equals(Mutation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Insert, other.Insert)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      if (!object.Equals(Upsert, other.Upsert)) return false;
      if (!object.Equals(Delete, other.Delete)) return false;
      if (OperationCase != other.OperationCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (operationCase_ == OperationOneofCase.Insert) hash ^= Insert.GetHashCode();
      if (operationCase_ == OperationOneofCase.Update) hash ^= Update.GetHashCode();
      if (operationCase_ == OperationOneofCase.Upsert) hash ^= Upsert.GetHashCode();
      if (operationCase_ == OperationOneofCase.Delete) hash ^= Delete.GetHashCode();
      hash ^= (int) operationCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (operationCase_ == OperationOneofCase.Insert) {
        output.WriteRawTag(34);
        output.WriteMessage(Insert);
      }
      if (operationCase_ == OperationOneofCase.Update) {
        output.WriteRawTag(42);
        output.WriteMessage(Update);
      }
      if (operationCase_ == OperationOneofCase.Upsert) {
        output.WriteRawTag(50);
        output.WriteMessage(Upsert);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        output.WriteRawTag(58);
        output.WriteMessage(Delete);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (operationCase_ == OperationOneofCase.Insert) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Insert);
      }
      if (operationCase_ == OperationOneofCase.Update) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      if (operationCase_ == OperationOneofCase.Upsert) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Upsert);
      }
      if (operationCase_ == OperationOneofCase.Delete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delete);
      }
      return size;
    }

    public void MergeFrom(Mutation other) {
      if (other == null) {
        return;
      }
      switch (other.OperationCase) {
        case OperationOneofCase.Insert:
          Insert = other.Insert;
          break;
        case OperationOneofCase.Update:
          Update = other.Update;
          break;
        case OperationOneofCase.Upsert:
          Upsert = other.Upsert;
          break;
        case OperationOneofCase.Delete:
          Delete = other.Delete;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 34: {
            global::Google.Datastore.V1Beta3.Entity subBuilder = new global::Google.Datastore.V1Beta3.Entity();
            if (operationCase_ == OperationOneofCase.Insert) {
              subBuilder.MergeFrom(Insert);
            }
            input.ReadMessage(subBuilder);
            Insert = subBuilder;
            break;
          }
          case 42: {
            global::Google.Datastore.V1Beta3.Entity subBuilder = new global::Google.Datastore.V1Beta3.Entity();
            if (operationCase_ == OperationOneofCase.Update) {
              subBuilder.MergeFrom(Update);
            }
            input.ReadMessage(subBuilder);
            Update = subBuilder;
            break;
          }
          case 50: {
            global::Google.Datastore.V1Beta3.Entity subBuilder = new global::Google.Datastore.V1Beta3.Entity();
            if (operationCase_ == OperationOneofCase.Upsert) {
              subBuilder.MergeFrom(Upsert);
            }
            input.ReadMessage(subBuilder);
            Upsert = subBuilder;
            break;
          }
          case 58: {
            global::Google.Datastore.V1Beta3.Key subBuilder = new global::Google.Datastore.V1Beta3.Key();
            if (operationCase_ == OperationOneofCase.Delete) {
              subBuilder.MergeFrom(Delete);
            }
            input.ReadMessage(subBuilder);
            Delete = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  The result of applying a mutation.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MutationResult : pb::IMessage<MutationResult> {
    private static readonly pb::MessageParser<MutationResult> _parser = new pb::MessageParser<MutationResult>(() => new MutationResult());
    public static pb::MessageParser<MutationResult> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MutationResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MutationResult(MutationResult other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
    }

    public MutationResult Clone() {
      return new MutationResult(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 3;
    private global::Google.Datastore.V1Beta3.Key key_;
    /// <summary>
    ///  The automatically allocated key.
    ///  Set only when the mutation allocated a key.
    /// </summary>
    public global::Google.Datastore.V1Beta3.Key Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as MutationResult);
    }

    public bool Equals(MutationResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Key);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      return size;
    }

    public void MergeFrom(MutationResult other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Google.Datastore.V1Beta3.Key();
        }
        Key.MergeFrom(other.Key);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (key_ == null) {
              key_ = new global::Google.Datastore.V1Beta3.Key();
            }
            input.ReadMessage(key_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Options shared by read requests.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReadOptions : pb::IMessage<ReadOptions> {
    private static readonly pb::MessageParser<ReadOptions> _parser = new pb::MessageParser<ReadOptions>(() => new ReadOptions());
    public static pb::MessageParser<ReadOptions> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Datastore.V1Beta3.DatastoreReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReadOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReadOptions(ReadOptions other) : this() {
      switch (other.ConsistencyTypeCase) {
        case ConsistencyTypeOneofCase.ReadConsistency:
          ReadConsistency = other.ReadConsistency;
          break;
        case ConsistencyTypeOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
      }

    }

    public ReadOptions Clone() {
      return new ReadOptions(this);
    }

    /// <summary>Field number for the "read_consistency" field.</summary>
    public const int ReadConsistencyFieldNumber = 1;
    /// <summary>
    ///  The non-transactional read consistency to use.
    ///  Cannot be set to `STRONG` for global queries.
    /// </summary>
    public global::Google.Datastore.V1Beta3.ReadOptions.Types.ReadConsistency ReadConsistency {
      get { return consistencyTypeCase_ == ConsistencyTypeOneofCase.ReadConsistency ? (global::Google.Datastore.V1Beta3.ReadOptions.Types.ReadConsistency) consistencyType_ : global::Google.Datastore.V1Beta3.ReadOptions.Types.ReadConsistency.READ_CONSISTENCY_UNSPECIFIED; }
      set {
        consistencyType_ = value;
        consistencyTypeCase_ = ConsistencyTypeOneofCase.ReadConsistency;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    /// <summary>
    ///  The transaction identifier to use.
    /// </summary>
    public pb::ByteString Transaction {
      get { return consistencyTypeCase_ == ConsistencyTypeOneofCase.Transaction ? (pb::ByteString) consistencyType_ : pb::ByteString.Empty; }
      set {
        consistencyType_ = pb::Preconditions.CheckNotNull(value, "value");
        consistencyTypeCase_ = ConsistencyTypeOneofCase.Transaction;
      }
    }

    private object consistencyType_;
    /// <summary>Enum of possible cases for the "consistency_type" oneof.</summary>
    public enum ConsistencyTypeOneofCase {
      None = 0,
      ReadConsistency = 1,
      Transaction = 2,
    }
    private ConsistencyTypeOneofCase consistencyTypeCase_ = ConsistencyTypeOneofCase.None;
    public ConsistencyTypeOneofCase ConsistencyTypeCase {
      get { return consistencyTypeCase_; }
    }

    public void ClearConsistencyType() {
      consistencyTypeCase_ = ConsistencyTypeOneofCase.None;
      consistencyType_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as ReadOptions);
    }

    public bool Equals(ReadOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadConsistency != other.ReadConsistency) return false;
      if (Transaction != other.Transaction) return false;
      if (ConsistencyTypeCase != other.ConsistencyTypeCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (consistencyTypeCase_ == ConsistencyTypeOneofCase.ReadConsistency) hash ^= ReadConsistency.GetHashCode();
      if (consistencyTypeCase_ == ConsistencyTypeOneofCase.Transaction) hash ^= Transaction.GetHashCode();
      hash ^= (int) consistencyTypeCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (consistencyTypeCase_ == ConsistencyTypeOneofCase.ReadConsistency) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReadConsistency);
      }
      if (consistencyTypeCase_ == ConsistencyTypeOneofCase.Transaction) {
        output.WriteRawTag(18);
        output.WriteBytes(Transaction);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (consistencyTypeCase_ == ConsistencyTypeOneofCase.ReadConsistency) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReadConsistency);
      }
      if (consistencyTypeCase_ == ConsistencyTypeOneofCase.Transaction) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Transaction);
      }
      return size;
    }

    public void MergeFrom(ReadOptions other) {
      if (other == null) {
        return;
      }
      switch (other.ConsistencyTypeCase) {
        case ConsistencyTypeOneofCase.ReadConsistency:
          ReadConsistency = other.ReadConsistency;
          break;
        case ConsistencyTypeOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            consistencyType_ = input.ReadEnum();
            consistencyTypeCase_ = ConsistencyTypeOneofCase.ReadConsistency;
            break;
          }
          case 18: {
            Transaction = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReadOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      /// <summary>
      ///  Read consistencies.
      /// </summary>
      public enum ReadConsistency {
        /// <summary>
        ///  Unspecified.
        /// </summary>
        READ_CONSISTENCY_UNSPECIFIED = 0,
        /// <summary>
        ///  Strong consistency.
        /// </summary>
        STRONG = 1,
        /// <summary>
        ///  Eventual consistency.
        /// </summary>
        EVENTUAL = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
